---
- name: Validar Prerrequisitos en Servidores Unix (con gather_facts)
  hosts: "{{ dispositivos_finales }}"
  gather_facts: true
  become: false

  tasks:
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  1. Variable directa 'awx_job_id': '{{ awx_job_id }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  2. Variable directa 'tower_job_id': '{{ tower_job_id }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  3. Variable de entorno 'AWX_JOB_ID': '{{ AWX_JOB_ID }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  4. Variable de entorno 'TOWER_JOB_ID': '{{ TOWER_JOB_ID }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  5. Variable directa 'awx_workflow_job_id': '{{ awx_workflow_job_id }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  6. Variable directa 'tower_workflow_job_id': '{{ tower_workflow_job_id }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  7. Variable de entorno 'AWX_WORKFLOW_JOB_ID': '{{ AWX_WORKFLOW_JOB_ID }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: mostrando las variables id de workflow y job
      debug:
       msg: "  8. Variable de entorno 'TOWER_WORKFLOW_JOB_ID':  '{{ TOWER_WORKFLOW_JOB_ID }}'"
      delegate_to: localhost
      ignore_errors: yes
    - name: Definir IDs de Job y Workflow (debug)
      ansible.builtin.set_fact:
        current_id: "{{ awx_workflow_job_id | default(tower_workflow_job_id | default(awx_job_id | default(tower_job_id | default('unknown_id'))))}}"
      delegate_to: localhost
      run_once: true
    - name: Mostrar IDs resueltos (debug)
      ansible.builtin.debug:  
        msg:
        - "ID del actual: {{ current_id }}"
      delegate_to: localhost
      run_once: true   
    - name: "UNIX CHECKS: 1. Mostrar información de Python usada por Ansible"
      ansible.builtin.debug:
        msg:
          - "Host: {{ inventory_hostname }}"
          - "Ansible está usando Python en: {{ ansible_python_interpreter | default(ansible_python.executable, true) | default('No detectado', true) }}"
          - "Versión de Python usada por Ansible: {{ ansible_python_version | default('No detectada') }}"
          - "Detalles de ansible_python: {{ ansible_python | default('No detectado') }}"
    - name: "UNIX CHECKS: 2. Validar conectividad SSH y ejecución básica (hostname)"
      ansible.builtin.command: hostname
      register: unix_hostname_output
      changed_when: false
      failed_when: unix_hostname_output.rc != 0
    - name: "UNIX CHECKS: Resultado de hostname"
      ansible.builtin.debug:
        msg: "Hostname en {{ inventory_hostname }}: {{ unix_hostname_output.stdout }}. Conexión SSH al puerto {{ ansible_port | default(22) }} OK."
    - name: "UNIX CHECKS: 3. Verificar instalación de Perl"
      ansible.builtin.command: perl -v
      register: perl_check_output
      ignore_errors: true
      changed_when: false
    - name: "UNIX CHECKS: Resultado de Perl"
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          Perl Encontrado: {{ 'Sí' if perl_check_output.rc == 0 else 'No (o error al ejecutar perl -v)' }}
          Salida: {{ perl_check_output.stderr if perl_check_output.stderr else perl_check_output.stdout }}
          RC: {{ perl_check_output.rc }}
