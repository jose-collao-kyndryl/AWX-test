---
- name: Validar Prerrequisitos en Servidores Windows via Jumphost
  hosts: servidores_windows_via_jump
  gather_facts: false
  serial: 1
  vars:
    puerto_base_tunel_local: 59850
  tasks:
    - name: "CÁLCULO DE PUERTO: Definir puerto dinámico para {{ inventory_hostname }}"
      ansible.builtin.set_fact:
        puerto_dinamico_tunel: "{{ puerto_base_tunel_local | int + ansible_play_hosts_all.index(inventory_hostname) | int }}"
    - name: "Establecer ansible_port para {{ inventory_hostname }}"
      ansible.builtin.set_fact:
        ansible_port: "{{ puerto_dinamico_tunel }}"
    - name: "PROCESO PRINCIPAL Y LIMPIEZA PARA {{ inventory_hostname }}"
      block:
        - name: "TUNNEL: Mostrar parámetros para {{ inventory_hostname }}"
          ansible.builtin.debug:
            msg: "Iniciando túnel para {{ inventory_hostname }}: LocalPort={{ puerto_dinamico_tunel }}, Target={{ target_actual_ip }}:{{ target_actual_winrm_port }}, Jump={{ jumphost_user }}@{{ jumphost_ip }}"

        - name: "TUNNEL: Estableciendo túnel SSH en background"
          ansible.builtin.command: >
            ssh -f -N -L {{ puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
            -o ServerAliveInterval=60 -o ConnectTimeout=15
            {{ jumphost_user }}@{{ jumphost_ip }}
          delegate_to: localhost
          changed_when: false
        - name: "TUNNEL: Esperar a que el puerto local {{ puerto_dinamico_tunel }} esté activo"
          ansible.builtin.wait_for:
            host: 127.0.0.1
            port: "{{ puerto_dinamico_tunel }}"
            timeout: 20
            delay: 2
            state: started
          delegate_to: localhost
        - name: "VALIDACIÓN WINDOWS: Conectividad WinRM y ejecución de 'hostname'"
          ansible.windows.win_command: hostname
          register: windows_hostname_validation
          changed_when: false
        - name: "ÉXITO: Reporte de validación para {{ inventory_hostname }}"
          ansible.builtin.debug:
            msg: "PRERREQUISITOS OK para {{ inventory_hostname }} ({{ target_actual_ip }}). Hostname: {{ windows_hostname_validation.stdout_lines[0] }}"
      rescue:
        - name: "FALLO: Reporte de error para {{ inventory_hostname }}"
          ansible.builtin.debug:
            msg: "ERROR al procesar {{ inventory_hostname }}. No se pudo establecer la conexión o validar. Continuando con el siguiente host."
      always:
        - name: "LIMPIEZA: Asegurando la terminación del túnel SSH para el puerto {{ puerto_dinamico_tunel }}"
          ansible.builtin.command: >
            kill -f "ssh .* -L {{ puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}.*{{ jumphost_user }}@{{ jumphost_ip }}"
          delegate_to: localhost
          changed_when: false
          failed_when: false
