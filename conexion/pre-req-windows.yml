---
- name: Validar Pre-requisitos en Servidores Windows (Versión Simplificada y Correcta)
  hosts: servidores_windows_via_jump
  gather_facts: false
  serial: 1 
  
  vars:
    puerto_base_tunel_local: 59850

  tasks:
    - name: "REPORTE: Inicializar listas de resultados"
      run_once: true
      delegate_to: localhost
      ansible.builtin.set_fact:
        hosts_exitosos: []
        hosts_fallidos: []

    - name: "CÁLCULO DE PUERTO: Definir puerto para {{ inventory_hostname }}"
      ansible.builtin.set_fact:
        puerto_dinamico_tunel: "{{ puerto_base_tunel_local | int + ansible_play_hosts_all.index(inventory_hostname) | int }}"

    - name: "PROCESO PRINCIPAL Y REPORTE PARA {{ inventory_hostname }}"
      delegate_to: localhost
      block:
        - name: "Conexión, Validación y Limpieza"
          block:
            - name: "TUNNEL: Estableciendo túnel en puerto {{ hostvars[inventory_hostname].puerto_dinamico_tunel }}"
              ansible.builtin.command: >
                ssh -f -N -L {{ hostvars[inventory_hostname].puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
                -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
                -o ServerAliveInterval=60 -o ConnectTimeout=15
                {{ jumphost_user }}@{{ jumphost_ip }}
              changed_when: false

            - name: "TUNNEL: Esperar a que el puerto {{ hostvars[inventory_hostname].puerto_dinamico_tunel }} esté activo"
              ansible.builtin.wait_for:
                host: 127.0.0.1
                port: "{{ hostvars[inventory_hostname].puerto_dinamico_tunel }}"
                timeout: 20

            - name: "VALIDACIÓN WINDOWS: Conectividad WinRM en {{ inventory_hostname }}"
              ansible.windows.win_command: hostname
              vars:
                ansible_host: 127.0.0.1
                ansible_port: "{{ hostvars[inventory_hostname].puerto_dinamico_tunel }}"
                # --- CORRECCIÓN CLAVE AQUÍ ---
                ansible_user: "{{ hostvars[inventory_hostname].ansible_user }}"
                ansible_password: "{{ hostvars[inventory_hostname].ansible_password }}"
                # --- FIN DE LA CORRECCIÓN ---
                ansible_connection: winrm
                ansible_winrm_transport: ntlm
                ansible_winrm_server_cert_validation: ignore
              register: windows_hostname_validation
              changed_when: false

            - name: "REPORTE ✅: Registrar host exitoso"
              ansible.builtin.set_fact:
                hosts_exitosos: "{{ hosts_exitosos + [{'host': inventory_hostname, 'ip': target_actual_ip, 'hostname_remoto': windows_hostname_validation.stdout_lines[0]}] }}"
                
          rescue:
            - name: "REPORTE ❌: Registrar host fallido"
              ansible.builtin.set_fact:
                hosts_fallidos: "{{ hosts_fallidos + [{'host': inventory_hostname, 'ip': target_actual_ip, 'error': ansible_failed_result.msg | default('Error desconocido.')}] }}"

          always:
            - name: "LIMPIEZA: Asegurando la terminación del túnel en puerto {{ hostvars[inventory_hostname].puerto_dinamico_tunel }}"
              ansible.builtin.command: >
                pkill -f "ssh .* -L {{ hostvars[inventory_hostname].puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}.*{{ jumphost_user }}@{{ jumphost_ip }}"
              changed_when: false
              failed_when: false

    - name: "REPORTE FINAL: Generar artefacto con el resumen"
      run_once: true
      delegate_to: localhost
      ansible.builtin.set_stats:
        data:
          resumen_validacion:
            hosts_exitosos_total: "{{ hosts_exitosos | length }}"
            hosts_fallidos_total: "{{ hosts_fallidos | length }}"
            hosts_exitosos: "{{ hosts_exitosos }}"
            hosts_fallidos: "{{ hosts_fallidos }}"
