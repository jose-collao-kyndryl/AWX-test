---
- name: Validar Prerrequisitos en Servidores Windows via Jumphost (ssh -L)
  hosts: servidores_windows_via_jump
  gather_facts: false
  serial: 1
  vars:
    puerto_base_tunel_local: 59850
  pre_tasks:
    - name: "CÁLCULO DE PUERTO: Definir 'puerto_dinamico_tunel' para {{ inventory_hostname }}"
      ansible.builtin.set_fact:
        puerto_dinamico_tunel: "{{ puerto_base_tunel_local | int + ansible_play_hosts_all.index(inventory_hostname) | int }}"
    - name: "establecer el ansible_port {{ inventory_hostname }}"
      ansible.builtin.set_fact:
        ansible_port: "{{ puerto_dinamico_tunel }}"
    - name: "TUNNEL: Mostrar parámetros para {{ inventory_hostname }}"
      ansible.builtin.debug:
        msg: "TUNNEL DEBUG para {{ inventory_hostname }}: LocalPort={{ puerto_dinamico_tunel }}, TargetIP={{ target_actual_ip }}, TargetPort={{ target_actual_winrm_port }}, JumpUser={{ jumphost_user }}, JumpIP={{ jumphost_ip }}"

######

    - name: "TUNNEL: Estableciendo túnel SSH para {{ inventory_hostname }} en puerto {{ puerto_dinamico_tunel }}"
      ansible.builtin.command: >-
        sshpass -p '{{ ansible_ssh_pass }}'
        ssh -f -N -L {{ puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
        -i {{ jumphost_ssh_key_file }}
        -o BatchMode=yes
        -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
        -o ServerAliveInterval=60 -o ConnectTimeout=15
        {{ jumphost_user }}@{{ jumphost_ip }}
        -vvv
      delegate_to: localhost
      changed_when: false
      register: tunnel_setup_status

######    
#    - name: "TUNNEL: Estableciendo túnel SSH para {{ inventory_hostname }} en puerto {{ puerto_dinamico_tunel }}"
#      ansible.builtin.command: >
#        ssh -f -N -L {{ puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
#        -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
#        -o ServerAliveInterval=60 -o ConnectTimeout=15
#        {{ jumphost_user }}@{{ jumphost_ip }}
#      delegate_to: localhost
#      changed_when: false
#      register: tunnel_setup_status
    - name: "TUNNEL: Esperar a que el túnel para {{ inventory_hostname }} esté activo en puerto {{ puerto_dinamico_tunel }}"
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: "{{ puerto_dinamico_tunel }}"
        timeout: 20
        delay: 2
        state: started
      delegate_to: localhost
      when: tunnel_setup_status.rc == 0
  tasks:
    - name: "VALIDACIÓN WINDOWS: Conectividad WinRM y ejecución de 'hostname' en {{ inventory_hostname }}"
      ansible.windows.win_command: hostname
      register: windows_hostname_validation
      changed_when: false
      when: tunnel_setup_status.rc == 0
      tags:
        - windows_prereq_check
    - name: "VALIDACIÓN WINDOWS: Resultado para {{ inventory_hostname }}"
      ansible.builtin.debug:
        msg: "PRERREQUISITOS WINDOWS OK para {{ inventory_hostname }} ({{ target_actual_ip }}). Hostname: {{ windows_hostname_validation.stdout }}"
      when: 
        - tunnel_setup_status.rc == 0
        - windows_hostname_validation is defined
        - windows_hostname_validation.rc == 0
      tags:
        - windows_prereq_check
  post_tasks:
    - name: Bloque para asegurar la terminación del túnel para {{ inventory_hostname }}
      delegate_to: localhost
      block:
        - name: Debug - Entrando limpieza para {{ inventory_hostname }}
          ansible.builtin.debug:
            msg: "Limpiando túnel para LocalPort={{ puerto_dinamico_tunel}} -> TargetIP={{ target_actual_ip }}"
      always:
        - name: Intentar terminar túnel SSH específico para {{ inventory_hostname }}
          ansible.builtin.command: >
            kill -f "ssh .* -L {{ puerto_dinamico_tunel}}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}.*{{ jumphost_user }}@{{ jumphost_ip }}"
          changed_when: false
          failed_when: false
