---
- name: Depurar Establecimiento de Túnel SSH
  hosts: servidores_windows_via_jump
  gather_facts: no
  serial: 1
  pre_tasks:
    - name: Mostrar parámetros de túnel que se usarán (desde inventario)
      ansible.builtin.debug:
        msg: "TUNNEL DEBUG para {{ inventory_hostname }}: LocalPort={{ local_tunnel_port_for_ssh_command }}, TargetIP={{ target_actual_ip }}, TargetPort={{ target_actual_winrm_port }}, JumpUser={{ jumphost_user }}, JumpIP={{ jumphost_ip }}"
      delegate_to: localhost
    - name: Estableciendo túnel SSH para {{ inventory_hostname }}
      ansible.builtin.command: >
        ssh -vvv -f -N -L {{ local_tunnel_port_for_ssh_command }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ExitOnForwardFailure=yes
        -o ServerAliveInterval=60
        -o ConnectTimeout=15
        {{ jumphost_user }}@{{ jumphost_ip }}
      delegate_to: localhost
      changed_when: no
      register: tunnel_setup_status

    - name: Esperar a que el túnel para {{ inventory_hostname }} esté activo
      ansible.builtin.wait_for:
        host: 127.0.0.1 # localhost del EE de AWX
        port: "{{ local_tunnel_port_for_ssh_command }}"
        timeout: 20
        delay: 2
        state: started
      delegate_to: localhost 
      when: tunnel_setup_status.rc == 0
  tasks:
    - name: Intentar un win_ping en {{ inventory_hostname }}
      ansible.windows.win_ping:
      when: tunnel_setup_status.rc == 0
      
    - name: Asegurar que la carpeta C:\Kyndryl existe
      ansible.windows.win_file:
        path: C:\Kyndryl
        state: directory
      when: tunnel_setup_status.rc == 0

    - name: Copiar iam_extract.ps1 a C:\Kyndryl
      ansible.windows.win_copy:
        src: "../files/{{ item }}"
        dest: "C:\\Kyndryl\\{{ item }}"
      when: tunnel_setup_status.rc == 0
      loop: "{{ ejecutables_windows }}"
    - name: Detectar si es Domain Controller
      ansible.windows.win_command: powershell -Command "(Get-WmiObject Win32_ComputerSystem).DomainRole"
      register: domain_role
      when: tunnel_setup_status.rc == 0
    - name: Ejecutar iam_extract.ps1 si es Domain Controller
      ansible.windows.win_command: powershell -ExecutionPolicy Bypass -File C:\Kyndryl\iam_extract.ps1
      args:
        chdir: C:\Kyndryl
      when:
        - tunnel_setup_status.rc == 0
        - domain_role.stdout is defined
        - domain_role.stdout | int == 4 or domain_role.stdout | int == 5
    - name: Ejecutar iam_extract.ps1 con /L:Local si es servidor miembro
      ansible.windows.win_command: powershell -ExecutionPolicy Bypass -File C:\Kyndryl\iam_extract.ps1 /L:Local
      args:
        chdir: C:\Kyndryl
      when:
        - tunnel_setup_status.rc == 0
        - domain_role.stdout is defined
        - domain_role.stdout | int == 3
    - name: Encontrar el archivo .mef3 generado en C:\Kyndryl
      ansible.windows.win_find:
        paths: C:\Kyndryl
        patterns: "*.mef3"
        use_regex: false
        age: "-5m"
        age_stamp: mtime
      register: found_mef3_files
      when: tunnel_setup_status.rc == 0

    - name: Mostrar archivos .mef3 encontrados (debug)
      ansible.builtin.debug:
        var: found_mef3_files.files[0].path
      when: found_mef3_files.matched > 0
    - name: Crear directorio temporal en el EE
      ansible.builtin.file:
        path: "{{ ruta_ee_temporal }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
    - name: Traer archivo .mef3 desde Windows al EE de AWX
      ansible.builtin.fetch:
        src: "{{ found_mef3_files.files[0].path }}"
        dest: "{{ ruta_ee_temporal }}/"
        flat: yes
      when: found_mef3_files.matched > 0
      register: fetched_to_ee_result
    - name: Mostrar resultado del fetch al EE (debug)
      ansible.builtin.debug:
        var: fetched_to_ee_result
      when: fetched_to_ee_result.changed
    - name: Asegurar directorio de destino en el servidor RHEL
      ansible.builtin.file:
        path: "{{ rhel_final_mef3_path }}"
        state: directory
        mode: '0755'
      delegate_to: GROANSIBLE
    - name: Asegurar directorio de destino en el servidor RHEL
      ansible.builtin.file:
        path: "{{ rhel_final_mef3_path }}"
        state: directory
        mode: '0755'
      delegate_to: GROANSIBLE
    - name: Copiar archivo .mef3 desde el EE al servidor RHEL
      ansible.builtin.copy:
        src: "{{ ruta_ee_temporal }}/{{ found_mef3_files.files[0].filename }}"
        dest: "{{ rhel_final_mef3_path }}"
        mode: '0644'
      delegate_to: GROANSIBLE
      when: fetched_to_ee_result.changed and found_mef3_files.matched > 0
  post_tasks:
    - name: Bloque para asegurar la terminación del túnel para {{ inventory_hostname }}
      delegate_to: localhost
      block:
        - name: Debug - Entrando limpieza para {{ inventory_hostname }}
          ansible.builtin.debug:
            msg: "Limpiando túnel para LocalPort={{ local_tunnel_port_for_ssh_command }} -> TargetIP={{ target_actual_ip }}"
      always:
        - name: Intentar terminar túnel SSH específico para {{ inventory_hostname }}
          ansible.builtin.command: >
            pkill -f "ssh .* -L {{ local_tunnel_port_for_ssh_command }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}.*{{ jumphost_user }}@{{ jumphost_ip }}"
          changed_when: false
          failed_when: false
