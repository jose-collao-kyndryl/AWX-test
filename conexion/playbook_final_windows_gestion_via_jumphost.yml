---
- name: Depurar Establecimiento de Túnel SSH
  hosts: windows_server_via_jump
  gather_facts: no
  pre_tasks:
    - name: Mostrar parámetros de túnel que se usarán (desde inventario)
      ansible.builtin.debug:
        msg: "TUNNEL DEBUG: LocalPort={{ local_tunnel_port_for_ssh_command }}, TargetIP={{ target_actual_ip }}, TargetPort={{ target_actual_winrm_port }}, JumpUser={{ jumphost_user }}, JumpIP={{ jumphost_ip }}"
      delegate_to: localhost
      run_once: yes

    - name: Estableciendo túnel SSH
      ansible.builtin.command: >
        ssh -vvv -f -N -L {{ local_tunnel_port_for_ssh_command }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ExitOnForwardFailure=yes
        -o ServerAliveInterval=60
        -o ConnectTimeout=15
        {{ jumphost_user }}@{{ jumphost_ip }}
      delegate_to: localhost
      changed_when: no
      run_once: yes
      register: tunnel_setup_status
      failed_when: no

    - name: Mostrar salida completa del comando SSH del túnel
      ansible.builtin.debug:
        var: tunnel_setup_status
      delegate_to: localhost
      run_once: yes

    - name: Esperar a que el túnel se establezca y el puerto esté activo
      ansible.builtin.wait_for:
        host: 127.0.0.1 # localhost del EE de AWX
        port: "{{ local_tunnel_port_for_ssh_command }}"
        timeout: 20
        delay: 2 # Damos un par de segundos de delay
        state: started # Asegurarse que el puerto esté "escuchando"
      delegate_to: localhost 
      run_once: yes
      when: tunnel_setup_status.rc == 0
  tasks:
    - name: Mostrar variables de conexión WinRM que Ansible USARÍA
      ansible.builtin.debug:
        msg: "WINRM DEBUG: HOST={{ inventory_hostname }}, ANSIBLE_HOST={{ ansible_host }}, ANSIBLE_PORT={{ ansible_port }}, ANSIBLE_USER={{ ansible_user }}, WINRM_SCHEME={{ ansible_winrm_scheme }}, TRANSPORT={{ ansible_winrm_transport }}"
      run_once: yes

    - name: Intentar un win_ping si todo lo anterior parece bien
      ansible.windows.win_ping:
      when: tunnel_setup_command_output.rc == 0
    - name: Asegurar que la carpeta C:\Kyndryl existe
      ansible.windows.win_file:
        path: C:\Kyndryl
        state: directory
      when: tunnel_setup_status.rc == 0

    - name: Copiar iam_extract.ps1 a C:\Kyndryl
      ansible.windows.win_copy:
        src: "files/{{ item }}"
        dest: "C:\\Kyndryl\\{{ item }}"
      when: tunnel_setup_status.rc == 0
      loop:
      - iam_extract.ps1
      - Get-LocalGroupMembership.ps1
  post_tasks:
    - name: Intentar terminar cualquier proceso de túnel
      ansible.builtin.shell: |
        PID_TO_KILL=$(ps aux | grep "ssh -vvv -f -N -L {{ local_tunnel_port_for_ssh_command }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}" | grep "{{ jumphost_user }}@{{ jumphost_ip }}" | grep -v grep | awk '{print $2}')
        if [ -n "$PID_TO_KILL" ]; then
          kill $PID_TO_KILL && echo "Killed tunnel process $PID_TO_KILL for port {{ local_tunnel_port_for_ssh_command }}"
        else
          echo "No tunnel process found to kill for port {{ local_tunnel_port_for_ssh_command }}."
        fi
      delegate_to: localhost
      changed_when: no
      run_once: yes
      args:
        executable: /bin/bash
