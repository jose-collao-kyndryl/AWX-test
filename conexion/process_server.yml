---
- name: "PROCESANDO: {{ current_host }}"
  block:
    - name: "CÁLCULO DE PUERTO para {{ current_host }}"
      ansible.builtin.set_fact:
        puerto_dinamico_tunel: "{{ puerto_base_tunel_local | int + hostvars[current_host].ansible_play_hosts_all.index(current_host) | int }}"
    
    - name: "Conexión, Validación y Limpieza para {{ current_host }}"
      block:
        - name: "TUNNEL: Estableciendo túnel para {{ current_host }}"
          ansible.builtin.command: >
            ssh -f -N -L {{ puerto_dinamico_tunel }}:{{ hostvars[current_host].target_actual_ip }}:{{ hostvars[current_host].target_actual_winrm_port }}
            -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
            -o ServerAliveInterval=60 -o ConnectTimeout=15
            {{ hostvars[current_host].jumphost_user }}@{{ hostvars[current_host].jumphost_ip }}
          changed_when: false

        - name: "TUNNEL: Esperar a que el puerto {{ puerto_dinamico_tunel }} esté activo"
          ansible.builtin.wait_for:
            host: 127.0.0.1
            port: "{{ puerto_dinamico_tunel }}"
            timeout: 20
            delay: 2
            state: started

        - name: "VALIDACIÓN WINDOWS: Conectividad WinRM en {{ current_host }}"
          ansible.windows.win_command: hostname
          vars:
            ansible_host: 127.0.0.1
            ansible_port: "{{ puerto_dinamico_tunel }}"
            ansible_user: "{{ hostvars[current_host].ansible_user }}"
            ansible_password: "{{ hostvars[current_host].ansible_password }}"
            ansible_connection: winrm
            ansible_winrm_transport: ntlm
            ansible_winrm_server_cert_validation: ignore
          register: windows_hostname_validation
          changed_when: false

        - name: "REPORTE ✅: Registrar host exitoso {{ current_host }}"
          ansible.builtin.set_fact:
            hosts_exitosos: "{{ hosts_exitosos + [{'host': current_host, 'ip': hostvars[current_host].target_actual_ip, 'hostname_remoto': windows_hostname_validation.stdout_lines[0]}] }}"
            
      rescue:
        - name: "REPORTE ❌: Registrar host fallido {{ current_host }}"
          ansible.builtin.set_fact:
            hosts_fallidos: "{{ hosts_fallidos + [{'host': current_host, 'ip': hostvars[current_host].target_actual_ip, 'error': ansible_failed_result.msg | default('Error desconocido.')}] }}"

      always:
        - name: "LIMPIEZA: Asegurando la terminación del túnel para {{ current_host }}"
          ansible.builtin.command: >
            pkill -f "ssh .* -L {{ puerto_dinamico_tunel }}:{{ hostvars[current_host].target_actual_ip }}:{{ hostvars[current_host].target_actual_winrm_port }}.*{{ hostvars[current_host].jumphost_user }}@{{ hostvars[current_host].jumphost_ip }}"
          changed_when: false
          failed_when: false
